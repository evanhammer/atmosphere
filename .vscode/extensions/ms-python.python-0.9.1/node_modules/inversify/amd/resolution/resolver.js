define(["require", "exports", "../constants/literal_types", "../utils/serialization", "./instantiation", "../constants/error_msgs"], function (require, exports, literal_types_1, serialization_1, instantiation_1, ERROR_MSGS) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _resolveRequest = function (requestScope) {
        return function (request) {
            var bindings = request.bindings;
            var childRequests = request.childRequests;
            var targetIsAnArray = request.target && request.target.isArray();
            var targetParentIsNotAnArray = !request.parentRequest ||
                !request.parentRequest.target ||
                !request.target ||
                !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
            if (targetIsAnArray && targetParentIsNotAnArray) {
                return childRequests.map(function (childRequest) {
                    var _f = _resolveRequest(requestScope);
                    return _f(childRequest);
                });
            }
            else {
                var result = null;
                if (request.target.isOptional() === true && bindings.length === 0) {
                    return undefined;
                }
                var binding = bindings[0];
                var isSingleton = binding.scope === literal_types_1.BindingScopeEnum.Singleton;
                var isRequestSingleton = binding.scope === literal_types_1.BindingScopeEnum.Request;
                if (isSingleton && binding.activated === true) {
                    return binding.cache;
                }
                if (isRequestSingleton &&
                    requestScope !== null &&
                    requestScope.has(binding.guid)) {
                    return requestScope.get(binding.guid);
                }
                if (binding.type === literal_types_1.BindingTypeEnum.ConstantValue) {
                    result = binding.cache;
                }
                else if (binding.type === literal_types_1.BindingTypeEnum.Function) {
                    result = binding.cache;
                }
                else if (binding.type === literal_types_1.BindingTypeEnum.Constructor) {
                    result = binding.implementationType;
                }
                else if (binding.type === literal_types_1.BindingTypeEnum.DynamicValue && binding.dynamicValue !== null) {
                    result = binding.dynamicValue(request.parentContext);
                }
                else if (binding.type === literal_types_1.BindingTypeEnum.Factory && binding.factory !== null) {
                    result = binding.factory(request.parentContext);
                }
                else if (binding.type === literal_types_1.BindingTypeEnum.Provider && binding.provider !== null) {
                    result = binding.provider(request.parentContext);
                }
                else if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {
                    result = instantiation_1.resolveInstance(binding.implementationType, childRequests, _resolveRequest(requestScope));
                }
                else {
                    var serviceIdentifier = serialization_1.getServiceIdentifierAsString(request.serviceIdentifier);
                    throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + " " + serviceIdentifier);
                }
                if (typeof binding.onActivation === "function") {
                    result = binding.onActivation(request.parentContext, result);
                }
                if (isSingleton) {
                    binding.cache = result;
                    binding.activated = true;
                }
                if (isRequestSingleton &&
                    requestScope !== null &&
                    !requestScope.has(binding.guid)) {
                    requestScope.set(binding.guid, result);
                }
                return result;
            }
        };
    };
    function resolve(context) {
        var _f = _resolveRequest(context.plan.rootRequest.requestScope);
        return _f(context.plan.rootRequest);
    }
    exports.resolve = resolve;
});
