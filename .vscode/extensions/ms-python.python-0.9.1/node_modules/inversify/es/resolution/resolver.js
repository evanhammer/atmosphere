import { BindingScopeEnum, BindingTypeEnum } from "../constants/literal_types";
import { getServiceIdentifierAsString } from "../utils/serialization";
import { resolveInstance } from "./instantiation";
import * as ERROR_MSGS from "../constants/error_msgs";
var _resolveRequest = function (requestScope) {
    return function (request) {
        var bindings = request.bindings;
        var childRequests = request.childRequests;
        var targetIsAnArray = request.target && request.target.isArray();
        var targetParentIsNotAnArray = !request.parentRequest ||
            !request.parentRequest.target ||
            !request.target ||
            !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
        if (targetIsAnArray && targetParentIsNotAnArray) {
            return childRequests.map(function (childRequest) {
                var _f = _resolveRequest(requestScope);
                return _f(childRequest);
            });
        }
        else {
            var result = null;
            if (request.target.isOptional() === true && bindings.length === 0) {
                return undefined;
            }
            var binding = bindings[0];
            var isSingleton = binding.scope === BindingScopeEnum.Singleton;
            var isRequestSingleton = binding.scope === BindingScopeEnum.Request;
            if (isSingleton && binding.activated === true) {
                return binding.cache;
            }
            if (isRequestSingleton &&
                requestScope !== null &&
                requestScope.has(binding.guid)) {
                return requestScope.get(binding.guid);
            }
            if (binding.type === BindingTypeEnum.ConstantValue) {
                result = binding.cache;
            }
            else if (binding.type === BindingTypeEnum.Function) {
                result = binding.cache;
            }
            else if (binding.type === BindingTypeEnum.Constructor) {
                result = binding.implementationType;
            }
            else if (binding.type === BindingTypeEnum.DynamicValue && binding.dynamicValue !== null) {
                result = binding.dynamicValue(request.parentContext);
            }
            else if (binding.type === BindingTypeEnum.Factory && binding.factory !== null) {
                result = binding.factory(request.parentContext);
            }
            else if (binding.type === BindingTypeEnum.Provider && binding.provider !== null) {
                result = binding.provider(request.parentContext);
            }
            else if (binding.type === BindingTypeEnum.Instance && binding.implementationType !== null) {
                result = resolveInstance(binding.implementationType, childRequests, _resolveRequest(requestScope));
            }
            else {
                var serviceIdentifier = getServiceIdentifierAsString(request.serviceIdentifier);
                throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + " " + serviceIdentifier);
            }
            if (typeof binding.onActivation === "function") {
                result = binding.onActivation(request.parentContext, result);
            }
            if (isSingleton) {
                binding.cache = result;
                binding.activated = true;
            }
            if (isRequestSingleton &&
                requestScope !== null &&
                !requestScope.has(binding.guid)) {
                requestScope.set(binding.guid, result);
            }
            return result;
        }
    };
};
function resolve(context) {
    var _f = _resolveRequest(context.plan.rootRequest.requestScope);
    return _f(context.plan.rootRequest);
}
export { resolve };
